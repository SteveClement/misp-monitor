#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# misp_stats
#
# Plugin to monitor the statistics of your MISP instance.
#
# Author: Steve Clement <steve@localhost.lu>
#
# v1.0 11-15-2019 - First draft
# v1.1 11-18-2019 - Enable multiple MISP instances #sloppyVersion
#
# Usage: place in /etc/munin/plugins/ (or link it there using ln -s)
#
# Parameters understood:
#
#       config   (required)
#       autoconf (optional - used by munin-config)
#
# Magic markers - optional - used by installation scripts and
# munin-config:
#
#  #%# capabilities=autoconf
#  #%# family=contrib

import sys
import warnings
from secrets.keys import misps

try:
    from pymisp import ExpandedPyMISP
    expanded_pymisp = True
except ImportError as e:
    expanded_pymisp = False

try:
    from pymisp import PyMISP  # noqa: E261
except ImportError as e:
    print("The module 'pymisp' is currently not installed.  You can install it by typing:\n"
          "sudo pip3 install pymisp\nImportError: No module named pymisp\n")
    print("Error as e: " + str(e))
    sys.exit(1)

try:
    misp_index = int(sys.argv[0].split('_')[2])
except (IndexError, ValueError) as e:
    print('Something went wrong, the munin script needs to be in the form of: misp_stats_0 ; where 0 is index 0 of the misp instance defined in keys.py')
    print("Error as e: " + str(e))
    sys.exit(1)

if len(sys.argv[0].split('_')) > 3:
    print('Something is seriously weird here, we counted too many underscores in the following argv: ' + str(sys.argv[0].split('_')))
    print('Double check and try again.')
    sys.exit(1)

if misp_index > len(misps) - 1:
    print('You seem to try and access a configuration index that does not exist. Bye.')
    sys.exit(1)


relative_path = 'servers/serverSettings/diagnostics'

body = None

if (misps[misp_index].split('|')[2] != 'True') or (misps[misp_index].split('|')[2] == ''):
    print('Please verify the value of verifyCert in the keys.py file, it currently seems to be: ' + misps[misp_index].split('|')[2])

misp_url = str(misps[misp_index].split('|')[0])
misp_key = str(misps[misp_index].split('|')[1])
misp_verifycert = bool(misps[misp_index].split('|')[2])


###########################################################
title = 'Statistics of instance: ' + misp_url
vlabel = 'Total stats'

statisticsAvailable = ['eventCount:ff0000',
                       'attribCount:22ff22',
                       'correlationCount:0022ff',
                       'userCount:00aaaa',
                       'orgCount:ff00ff',
                       'localOrgCount:22a64b',
                       'proposalCount:abc9cb']

critical = 1
###########################################################

warnings.filterwarnings('ignore', 'apt API not stable yet', FutureWarning)


def autoconf():
    try:
        from pymisp import ExpandedPyMISP  # noqa: E261
    except ImportError as e:
        pass

    try:
        from pymisp import PyMISP  # noqa: E261
    except ImportError as e:
        print("The module 'pymisp' is currently not installed.  You can install it by typing:\n"
          "sudo pip3 install pymisp\nImportError: No module named pymisp")
        print("Error as e: " + str(e))
        sys.exit(0)
    sys.exit(0)


def config():
    print('graph_category mispstats')
    print('graph_title %s' % (title))
    print('graph_vlabel %s' % (vlabel))
    for i, stat in enumerate(statisticsAvailable):
        if len(statisticsAvailable) > i:
            print('%s.colour %s' % (stat.split(':')[0], stat.split(':')[1]))
        if i < critical:
            print('%s.critical 0:0' % (stat.split(':')[0]))
        if i == 0:
            print('%s.draw AREA' % (stat.split(':')[0]))
        else:
            print('%s.draw STACK' % (stat.split(':')[0]))
        print('%s.label %s' % (stat.split(':')[0], stat.split(':')[0]))
        if i + 1 > critical:
            print('%s.warning 0:0' % (stat.split(':')[0]))
    sys.exit(0)


if len(sys.argv) > 1:
    if sys.argv[1] == 'autoconf':
        autoconf()
    elif sys.argv[1] == 'config':
        config()
    elif sys.argv[1]:
        print('unknown argument "' + sys.argv[1] + '"')
        sys.exit(1)

if expanded_pymisp is False:
    misp = PyMISP(misp_url, misp_key, misp_verifycert)
else:
    misp = ExpandedPyMISP(misp_url, misp_key, misp_verifycert)

userStats = misp.users_statistics()


statistics = {}
statistics['eventCount'] = userStats['stats']['event_count']
statistics['attribCount'] = userStats['stats']['attribute_count']
statistics['correlationCount'] = userStats['stats']['correlation_count']
statistics['userCount'] = userStats['stats']['user_count']
statistics['orgCount'] = userStats['stats']['org_count']
statistics['localOrgCount'] = userStats['stats']['local_org_count']
statistics['proposalCount'] = userStats['stats']['proposal_count']

for statistic in statisticsAvailable:
    statistic = statistic.split(':')[0]
    print('%s.value %s' % (statistic, statistics[statistic]))
